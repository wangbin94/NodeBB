{
  "author": {
    "name": "Bojan Djurkovic",
    "email": "bojan@onelobby.com"
  },
  "name": "mailgun-js",
  "description": "Simple Node.js helper module for Mailgun API",
  "keywords": [
    "email",
    "mailgun"
  ],
  "version": "0.2.2",
  "homepage": "https://github.com/1lobby/mailgun-js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/1lobby/mailgun-js.git"
  },
  "bugs": {
    "url": "http://github.com/1lobby/mailgun-js/issues"
  },
  "engines": {
    "node": "0.8.x"
  },
  "main": "./mailgun.js",
  "dependencies": {
    "request": "2.16.x"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# mailgun.js\n\nSimple Node.js module for [Mailgun](http://www.mailgun.com).\n\n## Installation\n\n`npm install mailgun-js`\n\n## Usage overview\n\nPlease see [Mailgun Documentation](http://documentation.mailgun.net) for full Mailgun API reference. Depends on [request module](https://github.com/mikeal/request).\nMost methods take a `data` parameter, which is a Javascript object that would contain the arguments for the Mailgun API.\nAll methods take a final parameter callback with three parameters: `error`, `response`, and `body`, exactly like the [request](https://github.com/mikeal/request) callback.\nWe try to parse the `body` into a javascript object, and return it to the callback as such for easier use and inspection by the client.\n`response.statusCode` will be `200` if everything worked OK. See Mailgun documentation for other (error) response codes.\nIf there was an error a new `Error` object will be passed to the callback in the `error` parameter.\n\nCurrently we only implement the `send message` (non-MIME) API and the `Mailboxes`, `Routes`, and `Mailing Lists` API's. These would be the most common\nand practical API's to be programmatically used. Others would be easy to add if needed.\n\n```javascript\nvar api_key = 'key-XXXXXXXXXXXXXXXXXXXXXXX';\nvar domain = 'mydomain.mailgun.org';\nvar mailgun = require('mailgun-js')(api_key, domain);\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!'\n};\n\nmailgun.messages.send(data, function (error, response, body) {\n  console.log(body);\n});\n```\n\n## API\n\nAll methods take a callback as their last parameter. The callback is called with a Javascript `Error` (if any) and then the `response` and the `body` returned by mailgun. \nFor actual examples see the tests source code. Note that `routes` and `lists` API's do not act on specified mailgun domains and are global for the mailgun account.\n\n* `mailgun.messages` - Creates a new email message and sends it using mailgun.\n   * `.send(data)` - [send a message](http://documentation.mailgun.net/api-sending.html).\n* `mailgun.mailboxes` - create, update, delete and list [mailboxes](http://documentation.mailgun.net/api-mailboxes.html).\n   * `.list(data)` - list mailboxes. `data` is optional and can contain `limit` and `skip`.\n   * `.create(data)` - create a mailbox. `data` should have `mailbox` name and `password`.\n   * `.update(data)` - update a mailbox given the `mailbox` name. Currently only the `password` can be changed.\n   * `.del(mailbox)` - delete a mailbox given the `mailbox` name.\n* `mailgun.routes` - create, get, update, delete and list [routes](http://documentation.mailgun.net/api-routes.html).\n   * `.list(data)` - list routes. `data` is optional and can contain `limit` and `skip`.\n   * `.get(id)` - get a specific route given the route `id`.\n   * `.create(data)` - create a route. `data` should contain `priority`, `description`, `expression` and `action` as strings.\n   * `.update(id, data)` - update a route given route `id`. All `data` parameters optional. This API call only updates the specified fields leaving others unchanged.\n   * `.del(id)` - delete a route given route `id`.\n* `mailgun.lists` - create, get, update, delete and list [mailing lists](http://documentation.mailgun.net/api-mailinglists.html) and get mailing list stats.\n   * `.list(data)` - list mailing lists. `data` is optional and can contain `address`, `limit` and `skip`.\n   * `.get(address)` - get a specific mailing list given mailing list `address`.\n   * `.create(data)` - create a mailing list. `data` should contain `address`, `name`, `description`, and `access_level` as strings.\n   * `.update(address, data)` - update a mailing list given mailing list `address`.\n   * `.del(address)` - delete a mailing list given mailing list `address`.\n   * `.stats(address)` - fetches mailing list stats given mailing list `address`.\n* `mailgun.lists.members` - create, get, update, delete and list [mailing list members](http://documentation.mailgun.net/api-mailinglists.html).\n   * `.list(listAddress, data)` - list mailing list members. `data` is optional and can contain `subscribed`, `limit` and `skip`.\n   * `.get(listAddress, memberAddress)` - get a specific mailing list member given mailing list address and member address.\n   * `.create(listAddress, data)` - create a mailing list member. `data` should contain `address`, optional member `name`, `subscribed`, `upsert`, and any additional `vars`.\n   * `.update(listAddress, memberAddress, data)` - update a mailing list member with given properties. Won't touch the property if it's not passed in.\n   * `.del(listAddress, memberAddress)` - delete a mailing list member given mailing list address and member address.\n* `mailgun._get(resource,data,callback)` - sends GET request to the specified resource on api.\n* `mailgun._post(resource,data,callback)` - sends POST request to the specified resource on api.\n* `mailgun._del(resource,data,callback)` - sends DELETE request to the specified resource on api.\n* `mailgun._put(resource,data,callback)` - sends PUT request to the specified resource on api.\n\n### Unexposed API Methods\n\nMailgun-js also provides helper methods to allow users to interact with parts of the api that are not exposed already.\n\nExample: Get All Stats\n\n```js\n  \nmailgun._get('/stats', function (error, response, body) {\n  console.log(body);\n});\n\n```\n\n## Tests\n\nTo run the test suite you must first have a Mailgun account with a domain setup. Then create a file named _./test/auth.json_, which contains your credentials as JSON, for example:\n\n```json\n{ \"api_key\": \"key-XXXXXXXXXXXXXXXXXXXXXXX\", \"domain\": \"mydomain.mailgun.org\" }\n```\n\nYou should edit _./test/fixture.json_ and modify at least the `to` and `from` fields of the `message` object to match\nemails you would like to test with. Modify other fields as desired, though the given defaults will work.\n\nThen install the dev dependencies and execute the test suite:\n\n```\n$ npm install\n$ npm test\n```\n\nThe tests will call Mailgun API, and will send a test email, create mailbox(es), route(s), mailing list and mailing list member.\n\n## TODO\n\n* Other API sections.\n\n## License\n\nThis project is not endorsed by or affiliated with [Mailgun](http://www.mailgun.com).\n\nCopyright 2012, 2013 OneLobby\n\nLicensed under the MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "mailgun-js@0.2.2",
  "_shasum": "557be859792d404c969a53de9f07ad0fab47ac1d",
  "_from": "mailgun-js@~0.2.2",
  "_resolved": "https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.2.2.tgz"
}
